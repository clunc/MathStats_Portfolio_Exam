set.seed(42)
result <- factoextra::hcut(x = df_scaled,
hc_func = "agnes",         # Clustering function: agnes, diana, hclust
hc_metric = "euclidean",   # Distance: euclidean, manhattan, pearson, ...
hc_method = "complete",    # Agglomeration method: complete, single, ... (linkage)
k = 7,                     # Number of clusters
stand = FALSE)              # Standardize before clustering
fviz_dend(result, type = 'circular', cex = 0.6, show_labels = TRUE, repel = TRUE)
df_scaled$cluster <- as.character(result$cluster) # The cluster assignment is stored in the results object
cluster_means <- df_scaled %>%
group_by(cluster) %>%
summarise(across(everything(), mean))
cluster_means %>%
pivot_longer(cols = -c(iso_alpha, cluster), names_to = 'variable', values_to = 'mean') %>%
ggplot(aes(cluster, variable, fill= mean)) +
scale_fill_viridis(discrete=FALSE) +
geom_tile()
list(6,7,8) %>%
map(factoextra::hcut, clusters = 4)
# let's set the seed with a magic number
set.seed(42)
result <- factoextra::hcut(x = df_scaled,
hc_func = "agnes",         # Clustering function: agnes, diana, hclust
hc_metric = "euclidean",   # Distance: euclidean, manhattan, pearson, ...
hc_method = "complete",    # Agglomeration method: complete, single, ... (linkage)
k = 7,                     # Number of clusters
stand = FALSE)              # Standardize before clustering
fviz_dend(result, type = 'circular', cex = 0.6, show_labels = TRUE, repel = TRUE)
list(6,7,8) %>%
map(factoextra::hcut, x = df_scaled, clusters = 4)
df_scaled$cluster <- as.character(result$cluster) # The cluster assignment is stored in the results object
list(6,7,8) %>%
map(factoextra::hcut, x = df_scaled, clusters = 4)
View(df_scaled)
list(6,7,8) %>%
map(factoextra::hcut, x = df_scaled, clusters = 4) %>%
fviz_dend(type = 'circular', cex = 0.6, show_labels = TRUE, repel = TRUE)
list(6,7,8) %>%
map(factoextra::hcut, x = df_scaled, clusters = 4) %>%
fviz_dend(type = 'circular', cex = 0.6, show_labels = TRUE, repel = TRUE)
# let's set the seed with a magic number
set.seed(42)
result <- factoextra::hcut(x = df_scaled,
hc_func = "agnes",         # Clustering function: agnes, diana, hclust
hc_metric = "euclidean",   # Distance: euclidean, manhattan, pearson, ...
hc_method = "complete",    # Agglomeration method: complete, single, ... (linkage)
k = 7,                     # Number of clusters
stand = FALSE)              # Standardize before clustering
fviz_dend(result, type = 'circular', cex = 0.6, show_labels = TRUE, repel = TRUE)
df_scaled$cluster <- as.character(result$cluster) # The cluster assignment is stored in the results object
cluster_means <- df_scaled %>%
group_by(cluster) %>%
summarise(across(everything(), mean))
cluster_means %>%
pivot_longer(cols = -c(iso_alpha, cluster), names_to = 'variable', values_to = 'mean') %>%
ggplot(aes(cluster, variable, fill= mean)) +
scale_fill_viridis(discrete=FALSE) +
geom_tile()
fviz_pca_biplot(pca, axes = c(1,3), repel = TRUE, select.ind = list(name = c('Colombia',
'South Africa',
'Guinea-Bissau',
'Turkmenistan')))
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
library(ggplot2)
library(tidyverse)
library(factoextra)
library(sf)
library(magrittr)
library(viridis)
library(cluster)
load("mathstats_miniproject_1.Rdata")
# first of all we discover the data by summary (skim would be also an alternative)
skimr::skim(df)
# As we can see the dataset consists of various variables with different units:
# life_expectancy: years
# HDI is the Human Development Index: normalized value (0-1)
# income_person: presumably in us-dollar
# gini_coefficient: normalized value (0-100)
# water: normalized value (0-100)
# sanitation: normalized value (0-100)
# calories: kcal
# freedom: score (1 to 7)
# democracy: normalized value (0-100)
# corruption: normalized value (0-100)
# broadband: normalized value (0-100)
# internet_users: normalized value (0-100)
df_scaled <- df %>%
rownames_to_column('country') %>% # for preserving rownames
mutate_at(vars(-c(iso_alpha, country)), scale) %>%
column_to_rownames('country') # for preserving rownames
# applying min-max transformation on non-normalized data
df_normalized <- df %>%
rownames_to_column('country') %>% # for preserving rownames
mutate_at(
vars(c('life_expectancy',
'income_person',
'calories')),
funs((.-min(.))/(max(.)-min(.))*100)) %>%
column_to_rownames('country') # for preserving rownames
# freedom is a special case
# as we know that the max value is 1 and min value is 7 we apply the min-max
# normalization, invert the scale by inverted_value = (1-normalized_value)
# and build a percental score by multiplying by 100
df_normalized %<>%
rownames_to_column('country') %>% # for preserving rownames
mutate(freedom = ((1-(freedom-1)/(7-1))) * 100) %>%
column_to_rownames('country') # for preserving rownames
# now we have to mutate the decimal values to percental values
df_normalized %<>%
rownames_to_column('country') %>% # for preserving rownames
mutate(HDI = HDI*100) %>%
column_to_rownames('country') # for preserving rownames
df_normalized_comp <- df_normalized %>% mutate(standardization = 'min-max')
df_scaled_comp <- df_scaled %>% mutate(standardization = 'z-score')
df_comp <- rbind(df_normalized_comp, df_scaled_comp)
df_comp %>%
select(-c('iso_alpha')) %>%
pivot_longer(cols=-c(standardization),
values_to='values',
names_to='categories') %>%
ggplot(aes(x=categories, y=values)) +
geom_boxplot() +
coord_flip() +
facet_wrap(. ~ standardization, scales='free_x')
# we will standardize the data (z-score), since min-max would deter the variance
# in life expectancy, income_person and calories
# calculate the euclidean distances
euclidean_distance_matrix <- df_scaled %>%
select(-c('iso_alpha')) %>% # exclude iso_alpha since not required for distances
dist(method = "euclidean", diag = FALSE, upper = FALSE) %>% # calc euclidean distance (L2)
as.matrix() %>% # change datatype to matrix
data.frame()
# get the most similiar countries
euclidean_distance_matrix %>%
select('Germany') %>%
arrange(Germany) %>%
head(6) # 6, since germany was pretty obvious ;)
# get the least similiar countries
euclidean_distance_matrix %>%
select('Germany') %>%
arrange(-Germany) %>%
head(5)
my_dend <- function(method = 'complete',
clusters,
type = 'rectangle',
labels = FALSE) {     # Building a function to execute hierarchical clustering and the dendogram visualization in one step.
result <- hcut(                           # hcut is the clustering-function
x =   df_scaled,  # standardized data frame
k = clusters,                           # Number of clusters
hc_func = "agnes",                      # Agglomerative clustering
hc_metric = "euclidian",                # Euclidean distance
hc_method = method,                     # Linkage method
stand = FALSE)                          # We have already scaled the data
fviz_dend(
result,
type = type,
horiz = FALSE,
cex = 0.6,
show_labels = labels,
repel = TRUE,
main = glue::glue("Method: {method}, Clusters: {clusters}"))
}
list("complete", "single", "average") %>%
map(my_dend, clusters = 4) %>%
gridExtra::grid.arrange(grobs = ., top =  "Comparison of Linkage Methods")
# let's set the seed with a magic number
set.seed(42)
result <- factoextra::hcut(x = df_scaled,
hc_func = "agnes",         # Clustering function: agnes, diana, hclust
hc_metric = "euclidean",   # Distance: euclidean, manhattan, pearson, ...
hc_method = "complete",    # Agglomeration method: complete, single, ... (linkage)
k = 7,                     # Number of clusters
stand = FALSE)              # Standardize before clustering
fviz_dend(result, type = 'circular', cex = 0.6, show_labels = TRUE, repel = TRUE)
df_scaled$cluster <- as.character(result$cluster) # The cluster assignment is stored in the results object
cluster_means <- df_scaled %>%
group_by(cluster) %>%
summarise(across(everything(), mean))
cluster_means %>%
pivot_longer(cols = -c(iso_alpha, cluster), names_to = 'variable', values_to = 'mean') %>%
ggplot(aes(cluster, variable, fill= mean)) +
scale_fill_viridis(discrete=FALSE) +
geom_tile()
# calculate the euclidean distances
#cluster_means %>%
#  dist(method = "euclidean", diag = FALSE, upper = FALSE) %>% # calc euclidean distance (L2)
#  as.matrix() %>% # change datatype to matrix
#  data.frame
data(World, package = "tmap")  # load data from tmap package
world <- World                 # rename
df_scaled %>%
select(c('iso_alpha','cluster')) %>%
full_join(world, by = c('iso_alpha' = 'iso_a3')) %>%
sf::st_as_sf() %>%
ggplot() +
geom_sf(aes(fill = cluster)) +
scale_fill_discrete(na.translate=FALSE)
pca <- df_scaled %>%
select(-c(iso_alpha, cluster)) %>%
prcomp()
#fviz_eig(pca)
#summary(pca)
# calculate proportion of variance per principal component
PoV <- pca$sdev^2/sum(pca$sdev^2)
# calculate needed principal components
sum_pov <- 0
i <- 1
while (sum_pov < 0.9){
sum_pov <- sum_pov + PoV[i]
i <- i + 1
}
print(paste(as.character(i-1),'principal components are needed to capture 90% of the variance in the data'))
fviz_pca_biplot(pca, repel = TRUE, select.ind = list(name = sample(rownames(df_scaled), 40)))
fviz_pca_biplot(pca, axes = c(1,3), repel = TRUE, select.ind = list(name = c('Colombia',
'South Africa',
'Guinea-Bissau',
'Turkmenistan')))
line_plot_data <- df_scaled %>%
filter(row.names(.) %in% c('Colombia',
'South Africa',
'Guinea-Bissau',
'Turkmenistan')) %>%
select(-c('iso_alpha','cluster')) %>%
rownames_to_column('country') %>%
pivot_longer(cols=-c(country), values_to='values', names_to='categories')
#  df_scaled %>%
#  select(-c('iso_alpha','cluster')) %>%
#  arrange(-gini_coefficient) %>%
#  head(10)
require(reshape2)
df_scaled %>%
select(-c('iso_alpha','cluster')) %>%
melt() %>%
ggplot(aes(x=variable, y=value)) +
geom_boxplot() +
theme(axis.text.x = element_text(angle = 90)) +
geom_line(data = line_plot_data, aes(x=categories, y=values, group=country, color=country))+
geom_point(data = line_plot_data, aes(x=categories, y=values, color=country))
fviz_pca_ind(pca,
repel = TRUE,
geom.ind = 'text',
habillage = df_scaled$cluster,
select.ind = list(name = sample(rownames(df_scaled), 40)),
addEllipses = T)
fviz_pca_biplot(pca, axes = c(1,2), repel = TRUE, select.ind = list(name = c('Colombia',
'South Africa',
'Guinea-Bissau',
'Turkmenistan')))
fviz_pca_biplot(pca, axes = c(1,3), repel = TRUE, select.ind = list(name = c('Colombia',
'South Africa',
'Guinea-Bissau',
'Turkmenistan')))
fviz_pca_biplot(pca, axes = c(1,4), repel = TRUE, select.ind = list(name = c('Colombia',
'South Africa',
'Guinea-Bissau',
'Turkmenistan')))
fviz_pca_biplot(pca, axes = c(1,5), repel = TRUE, select.ind = list(name = c('Colombia',
'South Africa',
'Guinea-Bissau',
'Turkmenistan')))
fviz_pca_biplot(pca, axes = c(1,7), repel = TRUE, select.ind = list(name = c('Colombia',
'South Africa',
'Guinea-Bissau',
'Turkmenistan')))
fviz_pca_biplot(pca, axes = c(1,8), repel = TRUE, select.ind = list(name = c('Colombia',
'South Africa',
'Guinea-Bissau',
'Turkmenistan')))
fviz_pca_biplot(pca, axes = c(1,9), repel = TRUE, select.ind = list(name = c('Colombia',
'South Africa',
'Guinea-Bissau',
'Turkmenistan')))
fviz_pca_biplot(pca, axes = c(1,10), repel = TRUE, select.ind = list(name = c('Colombia',
'South Africa',
'Guinea-Bissau',
'Turkmenistan')))
fviz_pca_biplot(pca, axes = c(1,11), repel = TRUE, select.ind = list(name = c('Colombia',
'South Africa',
'Guinea-Bissau',
'Turkmenistan')))
fviz_pca_biplot(pca, axes = c(1,2), repel = TRUE, select.ind = list(name = c('Colombia',
'South Africa',
'Guinea-Bissau',
'Turkmenistan')))
fviz_pca_biplot(pca, axes = c(1,2), repel = TRUE, select.ind = list(name = c('Colombia',
'South Africa',
'Guinea-Bissau',
'Turkmenistan')))
fviz_pca_biplot(pca, axes = c(1,3), repel = TRUE, select.ind = list(name = c('Colombia',
'South Africa',
'Guinea-Bissau',
'Turkmenistan')))
fviz_pca_biplot(pca, axes = c(1,2), repel = TRUE, select.ind = list(name = c('Colombia',
'South Africa',
'Guinea-Bissau',
'Turkmenistan')))
fviz_pca_biplot(pca, axes = c(1,3), repel = TRUE, select.ind = list(name = c('Colombia',
'South Africa',
'Guinea-Bissau',
'Turkmenistan')))
fviz_pca_biplot(pca, axes = c(1,4), repel = TRUE, select.ind = list(name = c('Colombia',
'South Africa',
'Guinea-Bissau',
'Turkmenistan')))
fviz_pca_biplot(pca, axes = c(1,3), repel = TRUE, select.ind = list(name = c('Colombia',
'South Africa',
'Guinea-Bissau',
'Turkmenistan')))
fviz_pca_biplot(pca, axes = c(2,3), repel = TRUE, select.ind = list(name = c('Colombia',
'South Africa',
'Guinea-Bissau',
'Turkmenistan')))
fviz_pca_biplot(pca, axes = c(1,3), repel = TRUE, select.ind = list(name = c('Colombia',
'South Africa',
'Guinea-Bissau',
'Turkmenistan')))
fviz_pca_biplot(pca, axes = c(1,2), repel = TRUE, select.ind = list(name = c('Colombia',
'South Africa',
'Guinea-Bissau',
'Turkmenistan')))
skimr::skim(df)
View(df_scaled)
%>%
data(World, package = "tmap")  # load data from tmap package
world <- World                 # rename
df_scaled %>%
select(c('iso_alpha','cluster')) %>%
full_join(world, by = c('iso_alpha' = 'iso_a3')) %>%
sf::st_as_sf() %>%
ggplot() +
geom_sf(aes(fill = cluster)) +
scale_fill_discrete(na.translate=FALSE)
pca <- df_scaled %>%
select(-c(iso_alpha, cluster)) %>%
prcomp()
#fviz_eig(pca)
#summary(pca)
# calculate proportion of variance per principal component
PoV <- pca$sdev^2/sum(pca$sdev^2)
# calculate needed principal components
sum_pov <- 0
i <- 1
while (sum_pov < 0.9){
sum_pov <- sum_pov + PoV[i]
i <- i + 1
}
print(paste(as.character(i-1),'principal components are needed to capture 90% of the variance in the data'))
fviz_eig(pca)
summary(pca)
fviz_eig(pca)
fviz_pca_biplot(pca, axes = c(1,3), repel = TRUE, select.ind = list(name = c('Colombia',
'South Africa',
'Guinea-Bissau',
'Turkmenistan')))
fviz_pca_biplot(pca, dimensions = c(1,3), repel = TRUE, select.ind = list(name = sample(rownames(df_scaled), 40)))
fviz_pca_biplot(pca, axes = c(1,3), repel = TRUE, select.ind = list(name = sample(rownames(df_scaled), 40)))
fviz_pca_biplot(pca, axes = c(1,2), repel = TRUE, select.ind = list(name = c(sample(rownames(df_scaled), 40), 'Egypt')))
repel
fviz_pca_biplot(pca, axes = c(1,2), repel = TRUE, select.ind = list(name = c(sample(rownames(df_scaled), 40), 'Egypt')))
fviz_pca_biplot(pca, axes = c(1,2), repel = TRUE, select.ind = list(name = c(sample(rownames(df_scaled), 40), 'Peru')))
fviz_pca_biplot(pca, axes = c(1,2), repel = TRUE, select.ind = list(name = c(sample(rownames(df_scaled), 40), 'Peru')))
fviz_pca_biplot(pca, axes = c(1,2), repel = TRUE, select.ind = list(name = c(sample(rownames(df_scaled), 40), 'Peru')))
fviz_pca_biplot(pca, axes = c(1,2), repel = TRUE, select.ind = list(name = c(sample(rownames(df_scaled), 40), 'Peru')))
fviz_pca_biplot(pca, axes = c(1,2), repel = TRUE, select.ind = list(name = c(sample(rownames(df_scaled), 40), 'Peru')))
fviz_pca_biplot(pca, axes = c(1,2), repel = TRUE, select.ind = list(name = c(sample(rownames(df_scaled), 40), 'Peru')))
fviz_pca_biplot(pca, axes = c(1,2), repel = TRUE, select.ind = list(name = c(sample(rownames(df_scaled), 40), 'Peru')))
fviz_pca_biplot(pca, axes = c(1,2), repel = TRUE, select.ind = list(name = c(sample(rownames(df_scaled), 40), 'Peru')))
fviz_pca_biplot(pca, axes = c(1,3), repel = TRUE, select.ind = list(name = c(sample(rownames(df_scaled), 40), 'Peru')))
fviz_pca_biplot(pca, axes = c(1,3), repel = TRUE, select.ind = list(name = c(sample(rownames(df_scaled), 40), 'Armenia')))
fviz_pca_biplot(pca, axes = c(1,2), repel = TRUE, select.ind = list(name = c(sample(rownames(df_scaled), 40), 'Armenia')))
fviz_pca_biplot(pca, axes = c(1,2), repel = TRUE, select.ind = list(name = c(sample(rownames(df_scaled), 40), 'Armenia')))
fviz_pca_biplot(pca, axes = c(1,4), repel = TRUE, select.ind = list(name = c(sample(rownames(df_scaled), 40), 'Peru')))
fviz_pca_biplot(pca, axes = c(1,4), repel = TRUE, select.ind = list(name = c(sample(rownames(df_scaled), 40), 'Peru')))
fviz_pca_biplot(pca, repel = TRUE, select.ind = list(name = sample(rownames(df_scaled), 40)))
fviz_pca_biplot(pca, axes = c(1,2), repel = TRUE, select.ind = list(name = c('Peru',
'South Africa',
'Guinea-Bissau',
'Turkmenistan')))
fviz_pca_biplot(pca, axes = c(1,3), repel = TRUE, select.ind = list(name = c('Peru',
'South Africa',
'Guinea-Bissau',
'Turkmenistan')))
fviz_pca_biplot(pca, axes = c(1,4), repel = TRUE, select.ind = list(name = c('Peru',
'South Africa',
'Guinea-Bissau',
'Turkmenistan')))
line_plot_data <- df_scaled %>%
filter(row.names(.) %in% c('Peru',
'South Africa',
'Guinea-Bissau',
'Turkmenistan')) %>%
select(-c('iso_alpha','cluster')) %>%
rownames_to_column('country') %>%
pivot_longer(cols=-c(country), values_to='values', names_to='categories')
line_plot_data <- df_scaled %>%
filter(row.names(.) %in% c('Peru',
'South Africa',
'Guinea-Bissau',
'Turkmenistan')) %>%
select(-c('iso_alpha','cluster')) %>%
rownames_to_column('country') %>%
pivot_longer(cols=-c(country), values_to='values', names_to='categories')
#  df_scaled %>%
#  select(-c('iso_alpha','cluster')) %>%
#  arrange(-gini_coefficient) %>%
#  head(10)
require(reshape2)
df_scaled %>%
select(-c('iso_alpha','cluster')) %>%
melt() %>%
ggplot(aes(x=variable, y=value)) +
geom_boxplot() +
theme(axis.text.x = element_text(angle = 90)) +
geom_line(data = line_plot_data, aes(x=categories, y=values, group=country, color=country))+
geom_point(data = line_plot_data, aes(x=categories, y=values, color=country))
list(c(1,2), c(3,4)) %>%
map(fviz_pca_biplot, pca, clusters = 4, select.ind = list(name = c('Peru',
'South Africa',
'Guinea-Bissau',
'Turkmenistan')))
list(c(1,2), c(3,4)) %>%
map(fviz_pca_biplot, pca, clusters = 4, select.ind = list(name = c('Peru',
'South Africa',
'Guinea-Bissau',
'Turkmenistan')))
fviz_pca_biplot(pca, axes = c(1,2), repel = TRUE, select.ind = list(name = c('Peru',
'South Africa',
'Guinea-Bissau',
'Turkmenistan')))
fviz_pca_biplot(pca, axes = c(3,4), repel = TRUE, select.ind = list(name = c('Peru',
'South Africa',
'Guinea-Bissau',
'Turkmenistan')))
fviz_pca_biplot(pca, axes = c(1,2), repel = TRUE, select.ind = list(name = c('Peru',
'South Africa',
'Guinea-Bissau',
'Turkmenistan')))
fviz_pca_biplot(pca, axes = c(3,4), repel = TRUE, select.ind = list(name = c('Peru',
'South Africa',
'Guinea-Bissau',
'Turkmenistan')))
line_plot_data <- df_scaled %>%
filter(row.names(.) %in% c('Peru',
'South Africa',
'Guinea-Bissau',
'Turkmenistan')) %>%
select(-c('iso_alpha','cluster')) %>%
rownames_to_column('country') %>%
pivot_longer(cols=-c(country), values_to='values', names_to='categories')
require(reshape2)
df_scaled %>%
select(-c('iso_alpha','cluster')) %>%
melt() %>%
ggplot(aes(x=variable, y=value)) +
geom_boxplot() +
theme(axis.text.x = element_text(angle = 90)) +
geom_line(data = line_plot_data, aes(x=categories, y=values, group=country, color=country))+
geom_point(data = line_plot_data, aes(x=categories, y=values, color=country))
fviz_pca_biplot(pca, axes = c(1,2), repel = TRUE, select.ind = list(name = c('Peru',
'South Africa',
'Guinea-Bissau',
'Turkmenistan')))
fviz_pca_biplot(pca, axes = c(3,4), repel = TRUE, select.ind = list(name = c('Peru',
'South Africa',
'Guinea-Bissau',
'Turkmenistan')))
fviz_pca_biplot(pca, axes = c(1,2), repel = TRUE, select.ind = list(name = c('Peru',
'South Africa',
'Turkmenistan')))
fviz_pca_biplot(pca, axes = c(3,4), repel = TRUE, select.ind = list(name = c('Peru',
'South Africa',
'Turkmenistan')))
line_plot_data <- df_scaled %>%
filter(row.names(.) %in% c('Peru',
'South Africa',,
'Turkmenistan')) %>%
select(-c('iso_alpha','cluster')) %>%
rownames_to_column('country') %>%
pivot_longer(cols=-c(country), values_to='values', names_to='categories')
line_plot_data <- df_scaled %>%
filter(row.names(.) %in% c('Peru',
'South Africa
'Turkmenistan')) %>%
line_plot_data <- df_scaled %>%
filter(row.names(.) %in% c('Peru',
'South Africa'
'Turkmenistan')) %>%
line_plot_data <- df_scaled %>%
filter(row.names(.) %in% c('Peru',
'South Africa',
'Turkmenistan')) %>%
select(-c('iso_alpha','cluster')) %>%
rownames_to_column('country') %>%
pivot_longer(cols=-c(country), values_to='values', names_to='categories')
require(reshape2)
df_scaled %>%
select(-c('iso_alpha','cluster')) %>%
melt() %>%
ggplot(aes(x=variable, y=value)) +
geom_boxplot() +
theme(axis.text.x = element_text(angle = 90)) +
geom_line(data = line_plot_data, aes(x=categories, y=values, group=country, color=country))+
geom_point(data = line_plot_data, aes(x=categories, y=values, color=country))
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
knitr::(function(inputFile, encoding) { rmarkdown::render(inputFile,
knitr::function(inputFile, encoding) { rmarkdown::render(inputFile,
knitr:function(inputFile, encoding) { rmarkdown::render(inputFile,
encoding = encoding,
output_file = file.path(dirname(inputFile), 'index.html')) })
knitr:function(inputFile, encoding) { rmarkdown::render(inputFile,                                                         encoding = encoding,output_file = file.path(dirname(inputFile), 'index.html'))})
knit:function(inputFile, encoding) { rmarkdown::render(inputFile,                                                         encoding = encoding,output_file = file.path(dirname(inputFile), 'index.html'))})
knit:function(inputFile, encoding) { rmarkdown::render(inputFile,                                                         encoding = encoding,output_file = file.path(dirname(inputFile), 'index.html'))}
